{{#skipFormatter}}
    <!-- @formatter:off -->
{{/skipFormatter}}
package {{packageGroupName}}.{{moduleCoreInfrastructure}}.{{entityNameLower}};

import {{packageGroupName}}.{{moduleCommonDtos}}.{{entityNameLower}}.{{entityName}}SearchCondition;
import {{packageGroupName}}.{{moduleCommonDtos}}.utils.Sortable;
import {{packageGroupName}}.{{moduleCoreEntities}}.{{entityNameLower}}.{{entityName}};
import {{packageGroupName}}.{{moduleCommonExceptions}}.{{entityNameLower}}.{{entityName}}NotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class {{entityName}}Reader {
    private final {{entityName}}Repository {{entityNameLower}}Repository;

    /**
     * {{comment}} 목록 조회 - 페이징
     */
    public Page<{{entityName}}> getPage{{entityName}}List({{entityName}}SearchCondition searchCondition, Pageable pageable) {
        return {{entityNameLower}}Repository.getPage{{entityName}}List(searchCondition, pageable);
    }

    /**
     * {{comment}} 목록 조회 - 전체
     */
    public List<{{entityName}}> getAll{{entityName}}List({{entityName}}SearchCondition searchCondition, Sortable sortable) {
        return {{entityNameLower}}Repository.getAll{{entityName}}List(searchCondition, sortable);
    }

    /**
     * {{comment}} 단건 조회 - NotFoundException 을 던짐
     */
    public {{entityName}} get{{entityName}}OrThrow(Long {{entityNameLower}}Id) {
        return {{entityNameLower}}Repository.get{{entityName}}({{entityNameLower}}Id)
                .orElseThrow({{entityName}}NotFoundException::new);
    }

    /**
     * {{comment}} 단건 조회 - null 반환
     */
    public {{entityName}} get{{entityName}}OrNull(Long {{entityNameLower}}Id) {
        return {{entityNameLower}}Repository.get{{entityName}}({{entityNameLower}}Id)
                .orElse(null);
    }
}
