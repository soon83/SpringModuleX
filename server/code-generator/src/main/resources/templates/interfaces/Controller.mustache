<!--@formatter:off-->
package {{packageGroupName}}.{{moduleServerInterfaces}}.{{entityNameLower}};

import com.fasterxml.jackson.databind.ObjectMapper;
import {{packageGroupName}}.{{moduleCoreApplication}}.{{entityNameLower}}.{{entityName}}Facade;
import {{packageGroupName}}.{{moduleCommonDtos}}.{{entityNameLower}}.*;
import {{packageGroupName}}.{{moduleCommonDtos}}.utils.Sortable;
import {{packageGroupName}}.{{moduleServerInterfaces}}.configs.ResponseHeaderUtil;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/api/{{entityNameLower}}-list")
@RequiredArgsConstructor
public class {{entityName}}Controller {
    private final ObjectMapper objectMapper;
    private final {{entityName}}Facade {{entityNameLower}}Facade;
    private final {{entityName}}InterfaceMapper {{entityNameLower}}InterfaceMapper;

    /**
     * {{comment}} 목록 조회 - 페이징
     */
    @GetMapping("/paging")
    public List<{{entityName}}InfoResponse> searchPage{{entityName}}InfoList(
            @ModelAttribute @Valid {{entityName}}SearchRequest request,
            Pageable pageable,
            HttpServletResponse response
    ) {
        log.debug("# searchPage{{entityName}}InfoList # request: {}, pageable: {}", request, pageable);
        {{entityName}}SearchCondition searchCondition = {{entityNameLower}}InterfaceMapper.to{{entityName}}SearchCondition(request);
        Page<{{entityName}}Info> page{{entityName}}InfoList = {{entityNameLower}}Facade.searchPage{{entityName}}InfoList(searchCondition, pageable);
        ResponseHeaderUtil.setPageableResponseHeader(response, objectMapper, page{{entityName}}InfoList);
        return page{{entityName}}InfoList.getContent().stream()
                .map({{entityNameLower}}InterfaceMapper::to{{entityName}}InfoResponse)
                .toList();
    }

    /**
     * {{comment}} 목록 조회 - 전체
     */
    @GetMapping("/all")
    public List<{{entityName}}InfoResponse> searchAll{{entityName}}InfoList(
            @ModelAttribute @Valid {{entityName}}SearchRequest request,
            Sortable sortable
    ) {
        log.debug("# searchAll{{entityName}}InfoList # request: {}, sortable: {}", request, sortable);
        {{entityName}}SearchCondition searchCondition = {{entityNameLower}}InterfaceMapper.to{{entityName}}SearchCondition(request);
        List<{{entityName}}Info> all{{entityName}}InfoList = {{entityNameLower}}Facade.searchAll{{entityName}}InfoList(searchCondition, sortable);
        return all{{entityName}}InfoList.stream()
                .map({{entityNameLower}}InterfaceMapper::to{{entityName}}InfoResponse)
                .toList();
    }

    /**
     * {{comment}} 단건 조회
     */
    @GetMapping("/{{openCurlyBraces}}{{entityNameLower}}Id{{closeCurlyBraces}}")
    public {{entityName}}InfoResponse search{{entityName}}Info(@PathVariable Long {{entityNameLower}}Id) {
        log.debug("# search{{entityName}}Info # {{entityNameLower}}Id: {}", {{entityNameLower}}Id);
        {{entityName}}Info {{entityNameLower}}Info = {{entityNameLower}}Facade.search{{entityName}}Info({{entityNameLower}}Id);
        return {{entityNameLower}}InterfaceMapper.to{{entityName}}InfoResponse({{entityNameLower}}Info);
    }

    /**
     * {{comment}} 단건 등록
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public {{entityName}}InfoResponse register{{entityName}}Info(@RequestBody @Valid {{entityName}}RegisterRequest request) {
        log.debug("# register{{entityName}}Info # request: {}", request);
        {{entityName}}CreateCommand command = {{entityNameLower}}InterfaceMapper.to{{entityName}}CreateCommand(request);
        {{entityName}}Info {{entityNameLower}}Info = {{entityNameLower}}Facade.register{{entityName}}Info(command);
        return {{entityNameLower}}InterfaceMapper.to{{entityName}}InfoResponse({{entityNameLower}}Info);
    }

    /**
     * {{comment}} 대량 등록
     */
    @PostMapping("/bulk")
    @ResponseStatus(HttpStatus.CREATED)
    public List<{{entityName}}InfoResponse> registerBulk{{entityName}}Info(@RequestBody @Valid {{entityName}}BulkRegisterRequest request) {
        log.debug("# registerBulk{{entityName}}Info # request: {}", request);
        {{entityName}}BulkCreateCommand bulkCommand = {{entityNameLower}}InterfaceMapper.to{{entityName}}BulkCreateCommand(request);
        List<{{entityName}}Info> {{entityNameLower}}InfoList = {{entityNameLower}}Facade.registerBulk{{entityName}}Info(bulkCommand);
        return {{entityNameLower}}InfoList.stream()
                .map({{entityNameLower}}InterfaceMapper::to{{entityName}}InfoResponse)
                .toList();
    }

    /**
     * {{comment}} 단건 수정
     */
    @PutMapping("/{{openCurlyBraces}}{{entityNameLower}}Id{{closeCurlyBraces}}")
    public {{entityName}}InfoResponse edit{{entityName}}Info(@RequestBody @Valid {{entityName}}EditRequest request) {
        log.debug("# edit{{entityName}}Info # request: {}", request);
        {{entityName}}UpdateCommand command = {{entityNameLower}}InterfaceMapper.to{{entityName}}UpdateCommand(request);
        {{entityName}}Info {{entityNameLower}}Info = {{entityNameLower}}Facade.edit{{entityName}}Info(command);
        return {{entityNameLower}}InterfaceMapper.to{{entityName}}InfoResponse({{entityNameLower}}Info);
    }

    /**
     * {{comment}} 대량 수정
     */
    @PutMapping("/bulk")
    public List<{{entityName}}InfoResponse> editBulk{{entityName}}Info(@RequestBody @Valid {{entityName}}BulkEditRequest request) {
        log.debug("# editBulk{{entityName}}Info # request: {}", request);
        {{entityName}}BulkUpdateCommand bulkCommand = {{entityNameLower}}InterfaceMapper.to{{entityName}}BulkUpdateCommand(request);
        List<{{entityName}}Info> {{entityNameLower}}InfoList = {{entityNameLower}}Facade.editBulk{{entityName}}Info(bulkCommand);
        return {{entityNameLower}}InfoList.stream()
                .map({{entityNameLower}}InterfaceMapper::to{{entityName}}InfoResponse)
                .toList();
    }

    /**
     * {{comment}} 단건 삭제
     */
    @DeleteMapping("/{{openCurlyBraces}}{{entityNameLower}}Id{{closeCurlyBraces}}")
    public void remove{{entityName}}Info(@ModelAttribute @Valid {{entityName}}RemoveRequest request) {
        log.debug("# remove{{entityName}}Info # request: {}", request);
        {{entityName}}DeleteCommand command = {{entityNameLower}}InterfaceMapper.to{{entityName}}DeleteCommand(request);
        {{entityNameLower}}Facade.remove{{entityName}}Info(command);
    }

    /**
     * {{comment}} 대량 삭제
     */
    @PostMapping("/bulk-remove")
    public void removeBulk{{entityName}}Info(@RequestBody @Valid {{entityName}}BulkRemoveRequest request) {
        log.debug("# removeBulk{{entityName}}Info # request: {}", request);
        {{entityName}}BulkDeleteCommand bulkCommand = {{entityNameLower}}InterfaceMapper.to{{entityName}}BulkDeleteCommand(request);
        {{entityNameLower}}Facade.removeBulk{{entityName}}Info(bulkCommand);
    }
}
